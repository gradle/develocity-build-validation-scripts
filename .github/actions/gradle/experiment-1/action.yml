name: Run experiment 1
description: "Runs experiment 1 of the build validation scripts for Gradle"

inputs:
  gitRepo:
    description: "The URL for the Git repository to validate"
    required: true
  gitBranch:
    description: "The branch for the Git repository to validate"
    required: false
  gitCommitId:
    description: "The Git commit id for the Git repository to validate"
    required: false
  projectDir:
    description: "The build invocation directory within the Git repository"
    required: false
  tasks:
    description: "The Gradle tasks to invoke"
    required: false
  args:
    description: "Additional arguments to pass to Gradle"
    required: false
  gradleEnterpriseUrl:
    description: "The URL for the Gradle Enterprise server to connect to"
    required: false
  enableGradleEnterprise:
    description: "Enables Gradle Enterprise on a project not already connected"
    required: false
outputs:
  buildScanFirstBuild:
    description: "First build scan url"
    value: ${{ steps.run.outputs.buildScanFirstBuild }}
  buildScanSecondBuild:
    description: "Second build scan url"
    value: ${{ steps.run.outputs.buildScanSecondBuild }}

runs:
  using: "composite"
  steps:
    - name: Run Gradle Experiment 1
      id: run
      run: |
        cd gradle-enterprise-gradle-build-validation

        ARG_GIT_REPO="-r ${{ inputs.gitRepo }}"

        ARG_GIT_BRANCH=""
        if [ ! -z "${{ inputs.gitBranch }}" ]; then
          ARG_GIT_BRANCH="-b ${{ inputs.gitBranch }}"
        fi

        ARG_GIT_COMMIT_ID=""
        if [ ! -z "${{ inputs.gitCommitId }}" ]; then
          ARG_GIT_COMMIT_ID="-c ${{ inputs.gitCommitId }}"
        fi

        ARG_PROJECT_DIR=""
        if [ ! -z "${{ inputs.projectDir }}" ]; then
          ARG_PROJECT_DIR="-p ${{ inputs.projectDir }}"
        fi

        ARG_TASKS=""
        if [ ! -z "${{ inputs.tasks }}" ]; then
          ARG_TASKS="-t ${{inputs.tasks }}"
        fi

        ARG_ARGS=""
        if [ ! -z "${{ inputs.args }}" ]; then
          ARG_ARGS="-a ${{ inputs.args }}"
        fi

        ARG_GE_URL=""
        if [ ! -z "${{ inputs.gradleEnterpriseUrl }}" ]; then
          ARG_GE_URL="-s ${{ inputs.gradleEnterpriseUrl }}"
        fi

        ARG_GE_ENABLE=""
        if [ ! -z "${{ inputs.enableGradleEnterprise }}" ]; then
          ARG_GE_ENABLE="-e"
        fi

        # run experiment
        ./01-validate-incremental-building.sh "${ARG_GIT_REPO}" ${ARG_GIT_BRANCH:+"$ARG_GIT_BRANCH"} ${ARG_GIT_COMMIT_ID:+"$ARG_GIT_COMMIT_ID"} ${ARG_PROJECT_DIR:+"$ARG_PROJECT_DIR"} ${ARG_TASKS:+"$ARG_TASKS"} ${ARG_ARGS:+"$ARG_ARGS"} ${ARG_GE_URL:+"$ARG_GE_URL"} ${ARG_GE_ENABLE:+"$ARG_GE_ENABLE"}

        # set scans url as output
        RECEIPT_FILE=".data/01-validate-incremental-building/latest/exp1-*.receipt"
        echo "::set-output name=buildScanFirstBuild::$(grep "first build" ${RECEIPT_FILE} | sed 's/.* //')"
        echo "::set-output name=buildScanSecondBuild::$(grep "second build" ${RECEIPT_FILE} | sed 's/.* //')"
      shell: bash
